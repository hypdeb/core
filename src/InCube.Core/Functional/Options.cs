using System;
using JetBrains.Annotations;
using static InCube.Core.Preconditions;

namespace InCube.Core.Functional
{
    /// <summary>
    /// Companion class of the <see cref="IOption{T}"/> interface.
    /// </summary>
    [PublicAPI]
    public static class Options
    {
        /// <summary>
        /// Gets the value of <paramref name="self"/> or an alternative value <paramref name="default"/>.
        /// </summary>
        /// <param name="self">The <see cref="IOption{T}"/> to get a value from.</param>
        /// <param name="default">The alternative default value.</param>
        /// <typeparam name="T">Type of the <see cref="IOption{T}"/>.</typeparam>
        /// <returns>A <typeparamref name="T"/>.</returns>
        public static T? GetValueOrDefault<T>(this IOption<T> self, T @default) => self.HasValue ? self.Value : @default;

        /// <summary>
        /// Gets the value of the <paramref name="self"/> or an alternative value generated by <paramref name="default"/>.
        /// </summary>
        /// <param name="self">The <see cref="IOption{T}"/> to get a value from.</param>
        /// <param name="default">The alternative value generator.</param>
        /// <typeparam name="T">Type of the <see cref="IOption{T}"/>.</typeparam>
        /// <returns>A <typeparamref name="T"/>.</returns>
        public static T? GetValueOrDefault<T>(this IOption<T> self, [NotNull] Func<T> @default) => self.HasValue ? self.Value : CheckNotNull(@default, nameof(@default)).Invoke();
    }
}